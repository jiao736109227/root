NSD OPERATION DAY05

1 案例1：安装部署Tomcat服务器


    安装部署JDK基础环境
    安装部署Tomcat服务器
    创建JSP测试页面，文件名为test.jsp，显示服务器当前时间

步骤一：部署Tomcat服务器软件(192.168.2.100/24)

1）使用RPM安装JDK环境

    [root@web1 ~]# yum –y install  java-1.8.0-openjdk                //安装JDK
    [root@web1 ~]# yum –y install java-1.8.0-openjdk-headless        //安装JDK
    [root@web1 ~]# java –version                                    //查看JAVA版本

2）安装Tomcat

    [root@web1 ~]# tar -xzf  apache-tomcat-8.0.30.tar.gz
    [root@web1 ~]# mv apache-tomcat-8.0.30  /usr/local/tomcat
    [root@web1 ~]# ls /usr/local/tomcat
    bin/                                            //主程序目录
    lib/                                            //库文件目录
    logs/                                          //日志目录  
    temp/                                         //临时目录
    work/                                        //自动编译目录jsp代码转换servlet
    conf/                                        //配置文件目录
    webapps/                                        //页面目录

步骤二：修改Tomcat配置文件

1）创建测试JSP页面

    [root@web1 ~]# vim  /usr/local/tomcat/webapps/ROOT/test.jsp
    <html>
    <body>
    <center>
    Now time is: <%=new java.util.Date()%>            //显示服务器当前时间
    </center>
    </body>
    </html>

2）启动服务

    [root@web1 ~]# /usr/local/tomcat/bin/startup.sh
    [root@web1 ~]# firewall-cmd --set-default-zone=trusted
    [root@web1 ~]# setenforce 0

2.2 方案

修改server.xml配置文件，创建两个域名的虚拟主机，修改如下两个参数块：

    # cat /usr/local/tomcat/conf/server.xml
    … …
    <Host name=www.aa.com appBase="aa" unpackWARS="true" autoDeploy="true">
    </Host>
    <Host name="www.bb.com" appBase="bb" unpackWARS="true" autoDeploy="true">
    </Host>
    … …

提示：修改server.xml配置文件，通过在<Host>中添加Context，我们也可以指定页面的根路径位置，默认为ROOT

    <Context path="/test" docBase="/var/www/html/" />

使用keytool命令可以生成SSL密钥与证书文件

    #keytool -genkeypair -alias tomcat -keyalg RSA -keystore /usr/local/tomcat/keystore

2.3 步骤

实现此案例需要按照如下步骤进行。

步骤一：配置服务器虚拟主机

1）修改server.xml配置文件，创建虚拟主机

    [root@web1 ~]# vim /usr/local/tomcat/conf/server.xml
    … …
    <Host name="www.aa.com" appBase="aa" unpackWARS="true" autoDeploy="true">
    </Host>
    <Host name="www.bb.com" appBase="bb" unpackWARS="true" autoDeploy="true">
    </Host>

2）创建虚拟主机对应的页面根路径

    [root@web1 ~]# mkdir -p  /usr/local/tomcat/{aa,bb}/ROOT
    [root@web1 ~]# echo "AAA"   > /usr/local/tomcat/aa/ROOT/index.html
    [root@web1 ~]# echo "BBB" > /usr/local/tomcat/bb/ROOT/index.html

3）重启Tomcat服务器

    [root@web1 ~]# /usr/local/tomcat/bin/shutdown.sh
    [root@web1 ~]# /usr/local/tomcat/bin/startup.sh

4）客户端设置host文件，并浏览测试页面进行测试

    [root@client ~]# vim /etc/hosts
    … …
    192.168.2.100    www.aa.com  www.bb.com
    [root@client ~]# firefox http://www.aa.com:8080/        //注意访问的端口为8080
    [root@client ~]# firefox http://www.bb.com:8080/

步骤二：修改www.bb.com网站的首页目录为base

1）使用docBase参数可以修改默认网站首页路径

    [root@web1 ~]# vim /usr/local/tomcat/conf/server.xml
    … …
    <Host name="www.aa.com" appBase="aa" unpackWARS="true" autoDeploy="true">
    </Host>
    <Host name="www.bb.com" appBase="bb" unpackWARS="true" autoDeploy="true">
    <Context path="" docBase="base" reloadable="true"/>
    </Host>
    … …
    [root@web1 ~]# mkdir  /usr/local/tomcat/bb/base
    [root@web1 ~]# echo "BASE" > /usr/local/tomcat/bb/base/index.html
    [root@web1 ~]# /usr/local/tomcat/bin/shutdown.sh
    [root@web1 ~]# /usr/local/tomcat/bin/startup.sh

步骤三：跳转

1）当用户访问http://www.aa.com/test打开/var/www/html目录下的页面

    [root@web1 ~]# vim /usr/local/tomcat/conf/server.xml
    … …
    <Host name="www.aa.com" appBase="aa" unpackWARS="true" autoDeploy="true">
    <Context path="/test" docBase="/var/www/html/" />
    </Host>
    <Host name="www.bb.com" appBase="bb" unpackWARS="true" autoDeploy="true">
    <Context path="" docBase="base" />
    </Host>
    … …
    [root@web1 ~]# echo "Test" > /var/www/html/index.html
    [root@web1 ~]# /usr/local/tomcat/bin/shutdown.sh
    [root@web1 ~]# /usr/local/tomcat/bin/startup.sh

步骤四：配置Tomcat支持SSL加密网站

1）创建加密用的私钥和证书文件

    [root@web1 ~]# keytool -genkeypair -alias tomcat -keyalg RSA -keystore /usr/local/tomcat/keystore                //提示输入密码为:123456
    //-genkeypair     生成密钥对
    //-alias tomcat     密钥别名
    //-keyalg RSA     定义密钥算法为RSA算法
    //-keystore         定义密钥文件存储在:/usr/local/tomcat/keystore

2)再次修改server.xml配置文件，创建支持加密连接的Connector

    [root@web1 ~]# vim /usr/local/tomcat/conf/server.xml
    … …
    <Connector port="8443" protocol="org.apache.coyote.http11.Http11NioProtocol"
    maxThreads="150" SSLEnabled="true" scheme="https" secure="true"
    keystoreFile="/usr/local/tomcat/keystore" keystorePass="123456" clientAuth="false" sslProtocol="TLS" />
    //备注，默认这段Connector被注释掉了，打开注释，添加密钥信息即可

步骤五：配置Tomcat日志

1)为每个虚拟主机设置不同的日志文件

    [root@svr5 ~]# vim /usr/local/tomcat/conf/server.xml
    .. ..
    <Host name="www.aa.com" appBase="aa" unpackWARS="true" autoDeploy="true">
    <Context path="/test" docBase="/var/www/html/" />
    <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
                   prefix=" aa_access" suffix=".txt"
                   pattern="%h %l %u %t &quot;%r&quot; %s %b" />
    </Host>
    <Host name="www.bb.com" appBase="bb" unpackWARS="true" autoDeploy="true">
    <Context path="" docBase="base" />
    <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
                   prefix=" bb_access" suffix=".txt"
                   pattern="%h %l %u %t &quot;%r&quot; %s %b" />
    </Host>
    .. ..

3）查看服务器日志文件

    [root@web1 ~]# ls /usr/local/tomcat/logs/

步骤六：扩展实验(配置Tomcat集群)

1) 在192.168.4.5主机上配置Nginx调度器（具体安装步骤参考前面的章节）

    [root@srv5 ~]# vim  /usr/local/nginx/conf/nginx.conf
    http{
        upstream toms {
            server 192.168.2.100:8080;
            server 192.168.2.200:8080;
        }
        server  {
            listen 80;
            server_name localhost;
            location / {
                proxy_pass  http://toms;
            }
        }
    }  

2) 在192.168.2.100和192.168.2.200主机上配置Tomcat调度器

以下以Web1为例：

    [root@web1 ~]# vim  /usr/local/nginx/conf/nginx.conf
    [root@web1 ~]# yum –y install  java-1.8.0-openjdk                //安装JDK
    [root@web1 ~]# yum –y install java-1.8.0-openjdk-headless        //安装JDK
    [root@web1 ~]# java –version                                    //查看JAVA版本
    [root@web1 ~]# tar -xzf  apache-tomcat-8.0.30.tar.gz
    [root@web1 ~]# mv apache-tomcat-8.0.30  /usr/local/tomcat

3 案例3：使用Varnish加速Web
3.1 问题

通过配置Varnish缓存服务器，实现如下目标：

    使用Varnish加速后端Web服务
    代理服务器可以将远程的Web服务器页面缓存在本地
    远程Web服务器对客户端用户是透明的
    利用缓存机制提高网站的响应速度
    使用varnishadm命令管理缓存页面
    使用varnishstat命令查看Varnish状态

3.2 方案

通过源码编译安装Varnish缓存服务器

    编译安装Varnish软件

步骤一：构建Web服务器

步骤二：部署Varnish缓存服务器(192.168.4.5)

1）编译安装软件

    [root@proxy ~]# yum -y install gcc readline-devel    //安装软件依赖包
    [root@proxy ~]# yum -y install ncurses-devel         //安装软件依赖包
    [root@proxy ~]# yum -y install python-docutils         //安装软件依赖包
    [root@proxy ~]# yum -y install pcre-devel            //安装软件依赖包
    [root@proxy ~]# useradd -s /sbin/nologin varnish                //创建账户
    [root@proxy ~]# tar -xf varnish-5.2.1.tar.gz
    [root@proxy ~]# cd varnish-5.2.1
    [root@proxy varnish-5.2.1]# ./configure
    [root@proxy varnish-5.2.1]# make && make install

2）复制启动脚本及配置文件

    [root@proxy varnish-5.2.1]# cp  etc/example.vcl   /usr/local/etc/default.vcl

3）修改代理配置文件

    [root@proxy ~]# vim  /usr/local/etc/default.vcl
    backend default {
         .host = "192.168.2.100";
         .port = "80";
     }

步骤三：客户端测试

1）客户端开启浏览器访问

步骤四：其他操作

1）查看varnish日志

    [root@proxy ~]# varnishlog                        //varnish日志
    [root@proxy ~]# varnishncsa                    //访问日志

2）更新缓存数据，在后台web服务器更新页面内容后，用户访问代理服务器看到的还是之前的数据，说明缓存中的数据过期了需要更新（默认也会自动更新，但非实时更新）。

    [root@proxy ~]# varnishadm  ban.url 页面文件名
    //清空缓存数据，支持正则表达式
