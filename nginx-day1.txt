Operation DAY01

1 案例1：搭建Nginx服务器
--安装nginx-1.10.3版本时，需要使用如下参数：

    --with-http_ssl_module：提供SSL加密功能
    --user：指定账户
    --group：指定组

------    [root@proxy ~]# yum –y install gcc pcre-devel openssl-devel        //安装依赖包
    [root@proxy ~]# useradd –s /sbin/nologin nginx
    [root@proxy ~]# tar  -xf   nginx-1.10.3.tar.gz
    [root@proxy ~]# cd  nginx-1.10.3
    [root@proxy nginx-1.10.3]# ./configure   \
    > --prefix=/usr/local/nginx   \                //指定安装路径
    > --user=nginx   \                            //指定用户
    > --group=nginx  \                            //指定组
    > --with-http_ssl_module                        //开启SSL加密功能
      .. ..
    nginx path prefix: "/usr/local/nginx"
      nginx binary file: "/usr/local/nginx/sbin/nginx"
      nginx configuration prefix: "/usr/local/nginx/conf"
      nginx configuration file: "/usr/local/nginx/conf/nginx.conf"
      nginx pid file: "/usr/local/nginx/logs/nginx.pid"
      nginx error log file: "/usr/local/nginx/logs/error.log"
      nginx http access log file: "/usr/local/nginx/logs/access.log"
      nginx http client request body temporary files: "client_body_temp"
      nginx http proxy temporary files: "proxy_temp"
      nginx http fastcgi temporary files: "fastcgi_temp"
      nginx http uwsgi temporary files: "uwsgi_temp"
      nginx http scgi temporary files: "scgi_temp"
    [root@proxy nginx-1.10.3]# make && make install    //编译并安装
2）nginx命令的用法
---    [root@proxy ~]# /usr/local/nginx/sbin/nginx                    //启动服务
    [root@proxy ~]# /usr/local/nginx/sbin/nginx -s stop            //关闭服务
    [root@proxy ~]# /usr/local/nginx/sbin/nginx -s reload        //重新加载配置文件
    [root@proxy ~]# /usr/local/nginx/sbin/nginx –V                //查看软件信息
    [root@proxy ~]# ln -s /usr/local/nginx/sbin/nginx /sbin/        //方便后期使用
nginx服务默认通过TCP 80端口监听客户端请求：

    [root@proxy ~]# netstat  -anptu  |  grep nginx
    tcp        0        0 0.0.0.0:80        0.0.0.0:*        LISTEN        10441/nginx

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

步骤二：升级Nginx服务器

1）编译新版本nginx软件
---[root@proxy ~]# tar  -zxvf   nginx-1.12.2.tar.gz
[root@proxy ~]# cd nginx-1.12.2
[root@proxy nginx-1.12.2]# ./configure   \
> --prefix=/usr/local/nginx   \ 
> --user=nginx   \ 
> --group=nginx  \ 
> --with-http_ssl_module
[root@proxy nginx-1.12.2]# make

2) 备份老的nginx主程序，并使用编译好的新版本nginx替换老版本
---    [root@proxy nginx-1.12.2]# mv /usr/local/nginx/sbin/nginx  \
    >/usr/local/nginx/sbin/nginxold
    [root@proxy nginx-1.12.2]# cp objs/nginx  /usr/local/nginx/sbin/    //拷贝新版本
    [root@proxy nginx-1.12.2]# make upgrade                            //升级
    /usr/local/nginx/sbin/nginx -t
    nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok
    nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful
    kill -USR2 `cat /usr/local/nginx/logs/nginx.pid`
    sleep 1
    test -f /usr/local/nginx/logs/nginx.pid.oldbin
    kill -QUIT `cat /usr/local/nginx/logs/nginx.pid.oldbin`
    [root@proxy ~]# /usr/local/nginx/sbin/nginx –v                //查看版本

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

2 案例2：用户认证
--步骤一：修改Nginx配置文件

1）修改/usr/local/nginx/conf/nginx.conf
---    [root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
    .. ..
    server {
            listen       80;
            server_name  localhost;
            auth_basic "Input Password:";                        //认证提示符
            auth_basic_user_file "/usr/local/nginx/pass";        //认证密码文件
            location / {
                root   html;
                index  index.html index.htm;
            }
      }

2）生成密码文件，创建用户及密码

使用htpasswd命令创建账户文件，需要确保系统中已经安装了httpd-tools。
---    [root@proxy ~]# yum -y install  httpd-tools
    [root@proxy ~]# htpasswd -c /usr/local/nginx/pass   tom        //创建密码文件
    New password: 
    Re-type new password: 
    Adding password for user tom
    [root@proxy ~]# htpasswd  /usr/local/nginx/pass   jerry    //追加用户，不使用-c选项
    New password: 
    Re-type new password: 
    Adding password for user jerry
    [root@proxy ~]# cat /usr/local/nginx/pass

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

3 案例3：基于域名的虚拟主机

步骤一：修改配置文件

    [root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
    .. ..
    server {
            listen       80;                                      //端口
            server_name  www.aa.com;                            //域名
    auth_basic "Input Password:";                        //认证提示符
            auth_basic_user_file "/usr/local/nginx/pass";        //认证密码文件
    location / {
                root   html;                                    //指定网站根路径
                index  index.html index.htm;
           }
           
    }
    … …
        server {
            listen  80;                                        //端口
            server_name  www.bb.com;                            //域名
    location / { 
    root   www;                                 //指定网站根路径
    index  index.html index.htm;
    }
    }

2）创建网站根目录及对应首页文件

3）重启nginx服务

    [root@proxy ~]# /usr/local/nginx/sbin/nginx –s reload

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

4 案例4：SSL虚拟主机
  源码安装Nginx时必须使用--with-http_ssl_module参数，启用加密模块，对于需要进行SSL加密处理的站点添加ssl相关指令（设置网站需要的私钥和证书）。

  加密算法一般分为对称算法、非对称算法、信息摘要。

  对称算法有：AES、DES，主要应用在单机数据加密。

  非对称算法有：RSA、DSA，主要应用在网络数据加密。

  信息摘要：MD5、sha256，主要应用在数据完整性校验、数据秒传等。

步骤一：配置SSL虚拟主机

1）生成私钥与证书

---    [root@proxy ~]# cd /usr/local/nginx/conf
    [root@proxy ~]# openssl genrsa > cert.key                            //生成私钥
    [root@proxy ~]# openssl req -new -x509 -key cert.key > cert.pem      //生成证书

2）修改Nginx配置文件，设置加密网站的虚拟主机
---    [root@proxy ~]# vim  /usr/local/nginx/conf/nginx.conf
    … …    
    server {
            listen       443 ssl;
            server_name            www.cc.com;
            ssl_certificate      cert.pem;
            ssl_certificate_key  cert.key;
            ssl_session_cache    shared:SSL:1m;
            ssl_session_timeout  5m;
            ssl_ciphers  HIGH:!aNULL:!MD5;
            ssl_prefer_server_ciphers  on;
            location / {
                root   html;
                index  index.html index.htm;
            }
        }







